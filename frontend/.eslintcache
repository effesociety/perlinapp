[{"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Header.js":"1","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\App.js":"2","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Enter.js":"3","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\index.js":"4","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Footer.js":"5","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\services\\socket.js":"6","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CustomSnackbar.js":"7","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Game.js":"8","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\MyCards.js":"9","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CardImages.js":"10","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Table.js":"11"},{"size":528,"mtime":1607941972237,"results":"12","hashOfConfig":"13"},{"size":2610,"mtime":1607942310426,"results":"14","hashOfConfig":"13"},{"size":3535,"mtime":1607939817445,"results":"15","hashOfConfig":"13"},{"size":173,"mtime":1607938170411,"results":"16","hashOfConfig":"13"},{"size":1298,"mtime":1607720232109,"results":"17","hashOfConfig":"13"},{"size":61,"mtime":1607935109697,"results":"18","hashOfConfig":"13"},{"size":1071,"mtime":1607941993930,"results":"19","hashOfConfig":"13"},{"size":6975,"mtime":1607942277447,"results":"20","hashOfConfig":"13"},{"size":7246,"mtime":1607941442714,"results":"21","hashOfConfig":"13"},{"size":2350,"mtime":1607786623612,"results":"22","hashOfConfig":"13"},{"size":1738,"mtime":1607884423087,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15pcm17",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Header.js",["47"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\App.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Enter.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\index.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Footer.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\services\\socket.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CustomSnackbar.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Game.js",["48"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\MyCards.js",["49"],"import React from 'react';\r\nimport { socket } from \"./services/socket\";\r\nimport CardImages from './CardImages';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport 'animate.css/animate.css'\r\n\r\nclass MyCards extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            'cards': [],\r\n            'selectedCards': []\r\n        }\r\n        this.betValue = React.createRef();\r\n        //Function bindings\r\n        this.handleClickCard = this.handleClickCard.bind(this);\r\n        this.handleChangeCards = this.handleChangeCards.bind(this);\r\n        this.handleBet = this.handleBet.bind(this);\r\n    }\r\n\r\n    handleClickCard(card){\r\n        if(this.props.gameStatus && this.props.gameStatus === \"change\" && this.props.gameStatusProps.numChangeableCards && this.props.isMyTurn){\r\n            const numChangeableCards = this.props.gameStatusProps.numChangeableCards;\r\n            const nextSelectedCards = Array.from(this.state.selectedCards);\r\n            if(this.state.selectedCards.includes(card)){\r\n                const cardIndex = this.state.selectedCards.findIndex(c => c === card);\r\n                nextSelectedCards.splice(cardIndex,1);\r\n                this.setState({\r\n                    'selectedCards': nextSelectedCards\r\n                })\r\n            }\r\n            else if(this.state.selectedCards.length < numChangeableCards && !this.state.selectedCards.includes(card)){\r\n                nextSelectedCards.push(card);\r\n                this.setState({\r\n                    'selectedCards': nextSelectedCards\r\n                })\r\n            }\r\n            else if(this.state.selectedCards.length === numChangeableCards && !this.state.selectedCards.includes(card)){\r\n                nextSelectedCards.splice(0,1,card);\r\n                this.setState({\r\n                    'selectedCards': nextSelectedCards\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChangeCards(){\r\n        if(this.props.gameStatus && this.props.gameStatus === \"change\"){\r\n            const data = {\r\n                'cards': this.state.selectedCards\r\n            }\r\n            socket.emit('change', JSON.stringify(data));\r\n        }\r\n    }\r\n    \r\n    handleBet(action){\r\n        if(this.props.gameStatus && this.props.gameStatus === \"bet\"){\r\n            let data = {\r\n                'action': action,\r\n                'value': -1 //Default value\r\n            }\r\n            if(action === \"raise\"){\r\n                data.value = this.betValue.current.value;\r\n            }\r\n            socket.emit('bet', JSON.stringify(data));\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const isSelectable = this.props.gameStatus === \"change\" ? true : false;\r\n        if(!isSelectable && this.state.selectedCards.length > 0){\r\n            this.setState({\r\n                'selectedCards': []\r\n            })\r\n        }\r\n\r\n        return (\r\n            <Container className=\"animate__animated animate__slideInUp\">\r\n    \r\n                {this.props.gameStatus && this.props.gameStatus === \"showdown\" && this.props.gameStatusProps.isDraw && (\r\n                    <Typography variant=\"h1\" align=\"center\" className=\"my-cards-h1\">Pareggio!</Typography>\r\n                )}\r\n                \r\n                {this.props.gameStatus && this.props.gameStatus === \"showdown\" && !this.props.gameStatusProps.isDraw && this.props.gameStatusProps.isWinner && (\r\n                    <Typography variant=\"h1\" align=\"center\" className=\"my-cards-h1\">Hai vinto!</Typography>\r\n                )}\r\n    \r\n                {this.props.gameStatus && this.props.gameStatus === \"showdown\" && !this.props.gameStatusProps.isDraw && !this.props.gameStatusProps.isWinner && (\r\n                    <Typography variant=\"h1\" align=\"center\" className=\"my-cards-h1\">Hai perso...</Typography>\r\n                )}\r\n    \r\n    \r\n                {this.props.cards.length === 0 ? (\r\n                    <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\" gutterBottom>La mano deve ancora iniziare...</Typography>\r\n                ) : (\r\n                    <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\" gutterBottom>Le tue carte</Typography>\r\n                )}\r\n                <Box className=\"card-wrapper-box\">\r\n                    {this.props.cards.map(card => {\r\n    \r\n                        const imgWrapperClassname = this.state.selectedCards.includes(card) && isSelectable ? 'card-img-wrapper-selected' : 'card-img-wrapper';\r\n                        \r\n                        return (\r\n                            <Box className=\"card-box\">\r\n                                <Box className={imgWrapperClassname}>\r\n                                    <img draggable=\"false\" src={CardImages[card]} className=\"card-img\" onClick={() => this.handleClickCard(card)}/>\r\n                                </Box>\r\n                            </Box>\r\n                        )\r\n                    })}\r\n                </Box>\r\n    \r\n                <Box className=\"actions-wrapper-box\">\r\n                    {this.props.gameStatus && this.props.gameStatus === 'bet' && this.props.gameStatusProps.currentBet > 0 && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={() => this.handleBet('call')}>Call</Button>\r\n                    )}\r\n                    {this.props.gameStatus && this.props.gameStatus === 'bet' && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={() => this.handleBet('raise')}>Punta</Button>\r\n                    )}\r\n                    {this.props.gameStatus && this.props.gameStatus === 'bet' && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={() => this.handleBet('fold')}>Fold</Button>\r\n                    )}\r\n    \r\n                    \r\n                    {this.props.gameStatus && this.props.gameStatus === 'change' && this.state.selectedCards.length === 0 && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={this.handleChangeCards}>Sto Bene</Button>\r\n                    )}\r\n                    {this.props.gameStatus && this.props.gameStatus === 'change' && this.state.selectedCards.length !== 0 && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={this.handleChangeCards}>Cambia</Button>\r\n                    )}\r\n                </Box>\r\n    \r\n                {this.props.gameStatus && this.props.gameStatus === 'bet' && (\r\n                    <Box className=\"bet-input-box\">\r\n                        <TextField id=\"bet-value\" label=\"Valore puntata\" variant=\"filled\" disabled={!this.props.isMyTurn} inputRef={this.betValue} fullWidth/>\r\n                    </Box>\r\n                )}\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyCards;","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CardImages.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Table.js",["50","51","52"],{"ruleId":"53","severity":1,"message":"54","line":10,"column":21,"nodeType":"55","endLine":10,"endColumn":73},{"ruleId":"56","severity":1,"message":"57","line":105,"column":9,"nodeType":"58","messageId":"59","endLine":118,"endColumn":10},{"ruleId":"53","severity":1,"message":"54","line":110,"column":37,"nodeType":"55","endLine":110,"endColumn":148},{"ruleId":"60","severity":1,"message":"61","line":3,"column":8,"nodeType":"62","messageId":"63","endLine":3,"endColumn":17},{"ruleId":"60","severity":1,"message":"64","line":5,"column":8,"nodeType":"62","messageId":"63","endLine":5,"endColumn":16},{"ruleId":"53","severity":1,"message":"54","line":41,"column":33,"nodeType":"55","endLine":41,"endColumn":109},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'TableImg' is defined but never used."]