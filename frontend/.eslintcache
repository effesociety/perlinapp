[{"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Header.js":"1","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\App.js":"2","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Enter.js":"3","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\index.js":"4","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Footer.js":"5","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\services\\socket.js":"6","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CustomSnackbar.js":"7","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Game.js":"8","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\MyCards.js":"9","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CardImages.js":"10","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Table.js":"11","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\YouShallNotPass.js":"12","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Ranking.js":"13"},{"size":528,"mtime":1608032365314,"results":"14","hashOfConfig":"15"},{"size":3677,"mtime":1608233922239,"results":"16","hashOfConfig":"15"},{"size":3535,"mtime":1607939817445,"results":"17","hashOfConfig":"15"},{"size":173,"mtime":1607938170411,"results":"18","hashOfConfig":"15"},{"size":1298,"mtime":1607720232109,"results":"19","hashOfConfig":"15"},{"size":61,"mtime":1607935109697,"results":"20","hashOfConfig":"15"},{"size":1071,"mtime":1607941993930,"results":"21","hashOfConfig":"15"},{"size":10089,"mtime":1608214346207,"results":"22","hashOfConfig":"15"},{"size":11042,"mtime":1608233191195,"results":"23","hashOfConfig":"15"},{"size":2350,"mtime":1607786623612,"results":"24","hashOfConfig":"15"},{"size":2140,"mtime":1608227929579,"results":"25","hashOfConfig":"15"},{"size":525,"mtime":1608233602269,"results":"26","hashOfConfig":"15"},{"size":2382,"mtime":1608234391185,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15pcm17",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Header.js",["56"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\App.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Enter.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\index.js",[],["57","58"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Footer.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\services\\socket.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CustomSnackbar.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Game.js",["59"],"import {Component} from 'react';\r\nimport { socket } from \"./services/socket\";\r\nimport { Box, Card, CardContent, Button, Typography} from \"@material-ui/core/\";\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport MyCards from './MyCards';\r\nimport Table from './Table';\r\nimport Ranking from './Ranking';\r\nimport 'animate.css/animate.css'\r\n\r\nclass Game extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            'pocket': props.initialPocket,\r\n            'position': props.initialPosition,\r\n            'players': [],\r\n            'potValue': 0,\r\n            'tableCards': [],\r\n            'myCards': [],\r\n            'gameStatus': 'stop',\r\n            'GameStatusProps': {},\r\n            'isMyTurn': false,\r\n            'turnPlayer': \"\",\r\n            'startBtnsDisabled': false,\r\n            'ranking': [],\r\n            'showRanking': false\r\n        }\r\n        this.handleNewPositions = this.handleNewPositions.bind(this);\r\n        this.handlePocketUpdate = this.handlePocketUpdate.bind(this);\r\n        this.handlePotValueUpdate = this.handlePotValueUpdate.bind(this);\r\n        this.handleTableCards = this.handleTableCards.bind(this);\r\n        this.handleMyCards = this.handleMyCards.bind(this);\r\n        this.handleStatus = this.handleStatus.bind(this);\r\n        this.handleTurn = this.handleTurn.bind(this);\r\n        this.handleStatusChange = this.handleStatusChange.bind(this);\r\n        this.handleStatusBet = this.handleStatusBet.bind(this);\r\n        this.handleStatusShowdown = this.handleStatusShowdown.bind(this);\r\n        this.handleStatusStop = this.handleStatusStop.bind(this);\r\n        this.handleRankingUpdate = this.handleRankingUpdate.bind(this);\r\n        this.renderRanking = this.renderRanking.bind(this);\r\n        this.setRankingBtn = this.setRankingBtn.bind(this);\r\n    }\r\n\r\n    componentDidMount(){  \r\n        socket.on('newPositions', this.handleNewPositions);\r\n        socket.on('pocketUpdate', this.handlePocketUpdate);\r\n        socket.on('potValueUpdate', this.handlePotValueUpdate);\r\n        socket.on('tableCards', this.handleTableCards);\r\n        socket.on('cards', this.handleMyCards);\r\n        socket.on('status', this.handleStatus);\r\n        socket.on('turn', this.handleTurn);\r\n        socket.on('rankingUpdate', this.handleRankingUpdate);\r\n    }\r\n\r\n    handleNewPositions(json){\r\n        const data = JSON.parse(json);\r\n        //Set players for visualization\r\n        this.setState({\r\n            'players': data\r\n        })\r\n        //TO-DO: Verify if this is still needed\r\n        Object.keys(data).forEach(u => {\r\n            if(u === this.props.username){\r\n                this.setState({\r\n                    'position': data[u]\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handlePocketUpdate(json){\r\n        const data = JSON.parse(json);\r\n        this.setState({\r\n            'pocket': data.pocket\r\n        })\r\n    }\r\n\r\n    handlePotValueUpdate(json){\r\n        console.log(\"gotPotValueUpdate\")\r\n        \r\n        const data = JSON.parse(json);\r\n\r\n        console.log(data);\r\n\r\n        this.setState({\r\n            'potValue': data.potValue\r\n        })\r\n    }\r\n\r\n    handleStart(action){\r\n        const data = {\r\n            'action': action,\r\n        };\r\n        socket.emit('start', JSON.stringify(data));\r\n        this.setState({\r\n            'startBtnsDisabled': true\r\n        })\r\n    }\r\n\r\n    handleTableCards(json){\r\n        const data = JSON.parse(json);\r\n        this.setState({\r\n            'tableCards': data.tableCards\r\n        })\r\n    }\r\n\r\n    handleMyCards(json){\r\n        const data = JSON.parse(json);\r\n        this.setState({\r\n            'myCards': data.cards\r\n        })\r\n    }\r\n\r\n    handleStatus(json){\r\n        const data = JSON.parse(json);\r\n        switch(data.status){\r\n            case 'change':\r\n                this.handleStatusChange(data.numChangeableCards);\r\n                break;\r\n            case 'bet':\r\n                this.handleStatusBet(data.currentBet, data.betUser);\r\n                break;\r\n            case 'showdown':\r\n                this.handleStatusShowdown(data.isDraw, data.winner, data.winnerCards);\r\n                break;\r\n            case 'stop':\r\n                this.handleStatusStop();\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleStatusChange(numChangeableCards){\r\n        const nextGameStatusProps = {\r\n            'numChangeableCards': numChangeableCards\r\n        }\r\n        this.setState({\r\n            'gameStatus': 'change',\r\n            'gameStatusProps': nextGameStatusProps\r\n        })\r\n    }\r\n\r\n    handleStatusBet(currentBet, betUser){\r\n        const nextGameStatusProps = {\r\n            'currentBet': currentBet,\r\n            'betUser': betUser\r\n        }\r\n        this.setState({\r\n            'gameStatus': 'bet',\r\n            'gameStatusProps': nextGameStatusProps\r\n        })\r\n    }\r\n\r\n    handleStatusShowdown(isDraw, winner, cards){\r\n        let isWinner = false;\r\n        if(!isDraw && winner[0] === this.props.username){\r\n            isWinner = true;\r\n        }\r\n\r\n        const nextGameStatusProps = {\r\n            'isDraw': isDraw,\r\n            'isWinner': isWinner,\r\n            'winner': winner,\r\n            'cards': cards\r\n        }\r\n        //Well a lot needs to be done here!\r\n        this.setState({\r\n            'gameStatus': 'showdown',\r\n            'gameStatusProps': nextGameStatusProps\r\n        })\r\n    }\r\n\r\n    handleStatusStop(){\r\n        this.setState({\r\n            'gameStatus': 'stop',\r\n            'gameStatusProps': {},\r\n            'myCards': [],\r\n            'tableCards': [],\r\n            'startBtnsDisabled': false\r\n        })\r\n    }\r\n\r\n    handleTurn(json){\r\n        const data = JSON.parse(json);\r\n        if(data.turn === this.props.username){\r\n            this.setState({\r\n                'isMyTurn': true,\r\n                'turnPlayer': data.turn\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                'isMyTurn': false,\r\n                'turnPlayer': data.turn\r\n            })\r\n        }\r\n    }\r\n    \r\n    handleRankingUpdate(json){\r\n        const data = JSON.parse(json);\r\n        this.setState({\r\n            'ranking': data.ranking\r\n        })\r\n    }\r\n\r\n    setRankingBtn(state){\r\n        this.setState({\r\n            'showRanking': state\r\n        })\r\n    }\r\n\r\n    renderRanking(){\r\n        if(this.state.showRanking){\r\n            return (\r\n                <Ranking users={this.state.ranking} onClose={() => this.setRankingBtn(false)}/>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <Button \r\n                startIcon={<TimelineIcon />} \r\n                variant =\"contained\" \r\n                color=\"primary\" \r\n                className=\"show-ranking-btn animate__animated animate__slideInUp\" \r\n                onClick={() => this.setRankingBtn(true)}/>\r\n            )\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        if(this.state.gameStatus === \"stop\"){\r\n            document.body.classList.add(\"no-scroll\")\r\n        }\r\n        else if(this.state.gameStatus !== \"stop\" && document.body.classList.contains(\"no-scroll\")){\r\n            document.body.classList.remove(\"no-scroll\")\r\n        }\r\n\r\n        return (\r\n            <Box>\r\n\r\n                {this.state.gameStatus === \"stop\" && (\r\n                    <Box className=\"outer-wrapper\">\r\n                        <Box className=\"inner-wrapper\">\r\n                            <Card className=\"inner-wrapper-card animate__animated animate__slideInUp\">\r\n                                <CardContent>\r\n                                    <Typography variant=\"h4\" align=\"center\">\r\n                                        Codice Room: <b>{this.props.roomID}</b>\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                            <Box className=\"flex-break\"/>\r\n                            <Button \r\n                                variant=\"contained\" \r\n                                color=\"primary\" \r\n                                className=\"inner-wrapper-btn animate__animated animate__slideInUp\" \r\n                                disabled={this.state.startBtnsDisabled} \r\n                                onClick={() => this.handleStart('play')}>\r\n                                    Partecipa\r\n                            </Button>\r\n                            <Button \r\n                                variant=\"contained\" \r\n                                color=\"primary\" \r\n                                className=\"inner-wrapper-btn animate__animated animate__slideInUp\" \r\n                                disabled={this.state.startBtnsDisabled} \r\n                                onClick={() => this.handleStart('skip')}>\r\n                                    Skip\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                )}\r\n\r\n                <Box className=\"game-container\">\r\n\r\n                    <Box className=\"table-box-container\">\r\n                        <Table \r\n                            cards={this.state.tableCards} \r\n                            players={this.state.players} \r\n                            potValue={this.state.potValue}\r\n                        />\r\n                    </Box>\r\n                    <Box className=\"cards-box-container\">\r\n                        <MyCards \r\n                            cards={this.state.myCards} \r\n                            gameStatus={this.state.gameStatus} \r\n                            gameStatusProps={this.state.gameStatusProps} \r\n                            isMyTurn={this.state.isMyTurn} \r\n                            turnPlayer={this.state.turnPlayer}\r\n                            roomID={this.props.roomID}\r\n                            pocket={this.state.pocket}\r\n                            minBet={this.props.minBet}\r\n                        />\r\n                    </Box>\r\n\r\n                    {this.renderRanking()}\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\MyCards.js",["60","61","62"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CardImages.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Table.js",["63","64"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\YouShallNotPass.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Ranking.js",[],{"ruleId":"65","severity":1,"message":"66","line":10,"column":21,"nodeType":"67","endLine":10,"endColumn":73},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":116,"column":9,"nodeType":"74","messageId":"75","endLine":129,"endColumn":10},{"ruleId":"65","severity":1,"message":"66","line":136,"column":45,"nodeType":"67","endLine":136,"endColumn":113},{"ruleId":"65","severity":1,"message":"66","line":172,"column":41,"nodeType":"67","endLine":172,"endColumn":152},{"ruleId":"65","severity":1,"message":"66","line":208,"column":21,"nodeType":"67","endLine":208,"endColumn":84},{"ruleId":"65","severity":1,"message":"66","line":42,"column":37,"nodeType":"67","endLine":42,"endColumn":113},{"ruleId":"65","severity":1,"message":"66","line":51,"column":25,"nodeType":"67","endLine":51,"endColumn":93},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]