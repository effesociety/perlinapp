[{"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Header.js":"1","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\App.js":"2","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Enter.js":"3","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\index.js":"4","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Footer.js":"5","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\services\\socket.js":"6","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CustomSnackbar.js":"7","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Game.js":"8","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\MyCards.js":"9","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CardImages.js":"10","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Table.js":"11","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\YouShallNotPass.js":"12","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Ranking.js":"13"},{"size":528,"mtime":1608032365314,"results":"14","hashOfConfig":"15"},{"size":3627,"mtime":1608243543325,"results":"16","hashOfConfig":"15"},{"size":3535,"mtime":1607939817445,"results":"17","hashOfConfig":"15"},{"size":173,"mtime":1607938170411,"results":"18","hashOfConfig":"15"},{"size":1051,"mtime":1608283424230,"results":"19","hashOfConfig":"15"},{"size":61,"mtime":1607935109697,"results":"20","hashOfConfig":"15"},{"size":1071,"mtime":1607941993930,"results":"21","hashOfConfig":"15"},{"size":11912,"mtime":1608289753617,"results":"22","hashOfConfig":"15"},{"size":12290,"mtime":1608249872877,"results":"23","hashOfConfig":"15"},{"size":2350,"mtime":1607786623612,"results":"24","hashOfConfig":"15"},{"size":3610,"mtime":1608286787872,"results":"25","hashOfConfig":"15"},{"size":550,"mtime":1608243568460,"results":"26","hashOfConfig":"15"},{"size":2382,"mtime":1608234391185,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15pcm17",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Header.js",["56"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\App.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Enter.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\index.js",[],["57","58"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Footer.js",["59","60"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\services\\socket.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CustomSnackbar.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Game.js",["61"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\MyCards.js",["62","63","64"],"import React from 'react';\r\nimport { socket } from \"./services/socket\";\r\nimport CardImages from './CardImages';\r\nimport {Box, Container, Button, TextField, Typography} from \"@material-ui/core/\";\r\nimport PocketImg from \"./images/money-bag.png\";\r\nimport 'animate.css/animate.css'\r\n\r\nclass MyCards extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            'cards': [],\r\n            'selectedCards': [],\r\n            'isRaiseAllowed': false,\r\n            'countdownValue': -1,\r\n            'showCountdown': false\r\n        }\r\n        this.betValue = React.createRef();\r\n        //Function bindings\r\n        this.handleClickCard = this.handleClickCard.bind(this);\r\n        this.handleChangeCards = this.handleChangeCards.bind(this);\r\n        this.handleBet = this.handleBet.bind(this);\r\n        this.handleTextfieldChange = this.handleTextfieldChange.bind(this);\r\n    }\r\n\r\n    \r\n    componentDidUpdate(prevProps){\r\n        if(!prevProps.isMyTurn && this.props.isMyTurn){\r\n            this.setState({\r\n                'countdownValue': this.props.remainingTime,\r\n                'showCountdown': true\r\n            })\r\n            const interval = setInterval(() => {\r\n                if(this.state.countdownValue > 0){\r\n                    this.setState({\r\n                        'countdownValue': this.state.countdownValue - 1,\r\n                    });\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        'showCountdown': false\r\n                    });\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n    \r\n\r\n    handleClickCard(card){\r\n        if(this.props.gameStatus && this.props.gameStatus === \"change\" && this.props.gameStatusProps.numChangeableCards && this.props.isMyTurn){\r\n            const numChangeableCards = this.props.gameStatusProps.numChangeableCards;\r\n            const nextSelectedCards = Array.from(this.state.selectedCards);\r\n            if(this.state.selectedCards.includes(card)){\r\n                const cardIndex = this.state.selectedCards.findIndex(c => c === card);\r\n                nextSelectedCards.splice(cardIndex,1);\r\n                this.setState({\r\n                    'selectedCards': nextSelectedCards\r\n                })\r\n            }\r\n            else if(this.state.selectedCards.length < numChangeableCards && !this.state.selectedCards.includes(card)){\r\n                nextSelectedCards.push(card);\r\n                this.setState({\r\n                    'selectedCards': nextSelectedCards\r\n                })\r\n            }\r\n            else if(this.state.selectedCards.length === numChangeableCards && !this.state.selectedCards.includes(card)){\r\n                nextSelectedCards.splice(0,1,card);\r\n                this.setState({\r\n                    'selectedCards': nextSelectedCards\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChangeCards(){\r\n        if(this.props.gameStatus && this.props.gameStatus === \"change\"){\r\n            const data = {\r\n                'cards': this.state.selectedCards\r\n            }\r\n            socket.emit('change', JSON.stringify(data));\r\n        }\r\n    }\r\n    \r\n    handleBet(action){\r\n        if(this.props.gameStatus && this.props.gameStatus === \"bet\"){\r\n            this.setState({\r\n                'isRaiseAllowed': false\r\n            })\r\n            let data = {\r\n                'action': action,\r\n                'value': -1 //Default value\r\n            }\r\n            if(action === \"raise\"){\r\n                data.value = this.betValue.current.value;\r\n            }\r\n            socket.emit('bet', JSON.stringify(data));\r\n            document.getElementById('bet-value').value = \"\";\r\n        }\r\n    }\r\n\r\n    handleTextfieldChange(event){\r\n        //If problems use 'event.target.value'\r\n        if(!isNaN(this.betValue.current.value) && parseFloat(this.betValue.current.value) > this.props.gameStatusProps.currentBet &&  parseFloat(this.betValue.current.value) >= this.props.minBet){\r\n            this.setState({\r\n                'isRaiseAllowed': true\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                'isRaiseAllowed': false\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        //Fix for selected cards\r\n        const isSelectable = this.props.gameStatus === \"change\";\r\n        if(!isSelectable && this.state.selectedCards.length > 0){\r\n            this.setState({\r\n                'selectedCards': []\r\n            })\r\n        }\r\n        //Fix for disabling bet button\r\n        if(this.props.gameStatus !== \"bet\" && this.state.isRaiseAllowed){\r\n            this.setState({\r\n                \"isRaiseAllowed\": false\r\n            })\r\n        }\r\n\r\n        /*\r\n        <Typography variant=\"h4\" className=\"my-cards-h4\" align=\"center\">\r\n            Codice Room: <b>{this.props.roomID}</b>\r\n        </Typography>\r\n        */\r\n\r\n        return (\r\n            <Container className=\"animate__animated animate__slideInUp\">\r\n\r\n\r\n                {this.props.gameStatus && this.props.gameStatus === \"showdown\" && this.props.gameStatusProps.isDraw && (\r\n                    <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\">Pareggio!</Typography>\r\n                )}\r\n                {this.props.gameStatus && this.props.gameStatus === \"showdown\" && !this.props.gameStatusProps.isDraw && this.props.gameStatusProps.isWinner && (\r\n                    <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\">Hai vinto!</Typography>\r\n                )}\r\n                {this.props.gameStatus && this.props.gameStatus === \"showdown\" && !this.props.gameStatusProps.isDraw && !this.props.gameStatusProps.isWinner && (\r\n                    <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\">Hai perso... (vincitore: <b>{this.props.gameStatusProps.winner[0]}</b>)</Typography>\r\n                )}\r\n\r\n\r\n                {\r\n                    //Show cards of the winner\r\n                }\r\n                {this.props.gameStatus && this.props.gameStatus === \"showdown\" && !this.props.gameStatusProps.isDraw && !this.props.gameStatusProps.isWinner && (\r\n                    <Box className=\"card-outer-wrapper-box\">\r\n                        <Box className=\"card-inner-wrapper-box\">\r\n                            {this.props.gameStatusProps.cards.map(card => {\r\n                                return (\r\n                                    <Box className=\"card-box\">\r\n                                        <Box className=\"card-img-wrapper\">\r\n                                            <img draggable=\"false\" src={CardImages[card]} className=\"card-img\"/>\r\n                                        </Box>\r\n                                    </Box>\r\n                                )\r\n                            })}\r\n                        </Box>\r\n                    </Box>\r\n                )}\r\n\r\n                {this.props.gameStatus && (this.props.gameStatus === \"change\" || this.props.gameStatus === \"bet\") && this.props.isMyTurn && (\r\n                    <Box>\r\n                        {this.state.showCountdown && (\r\n                            <Box>\r\n                                <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\">\r\n                                    {this.state.countdownValue}\r\n                                </Typography>\r\n                            </Box>\r\n                        )}\r\n                        <Typography variant=\"h4\" className=\"my-cards-h4\" align=\"center\">\r\n                        È il <b>tuo </b>turno\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                )}\r\n                {this.props.gameStatus && (this.props.gameStatus === \"change\" || this.props.gameStatus === \"bet\") && !this.props.isMyTurn && (\r\n                    <Typography variant=\"h4\" className=\"my-cards-h4\" align=\"center\">\r\n                    È il turno di <b>{this.props.turnPlayer}</b>\r\n                    </Typography>\r\n                )}\r\n    \r\n                {this.props.cards.length === 0 ? (\r\n                    <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\" gutterBottom>La mano deve ancora iniziare...</Typography>\r\n                ) : (\r\n                    <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\" gutterBottom>Le tue carte</Typography>\r\n                )}\r\n                <Box className=\"card-outer-wrapper-box\">\r\n                    <Box className=\"card-inner-wrapper-box\">\r\n                        {this.props.cards.map(card => {\r\n        \r\n                            const selectableImg = this.props.gameStatus === \"change\" ? 'card-img-wrapper-selectable' : 'card-img-wrapper';\r\n                            const imgWrapperClassname = this.state.selectedCards.includes(card) && isSelectable ? 'card-img-wrapper-selected' : selectableImg;\r\n                            \r\n                            return (\r\n                                <Box className=\"card-box\">\r\n                                    <Box className={imgWrapperClassname}>\r\n                                        <img draggable=\"false\" src={CardImages[card]} className=\"card-img\" onClick={() => this.handleClickCard(card)}/>\r\n                                    </Box>\r\n                                </Box>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n                </Box>\r\n    \r\n                <Box className=\"actions-wrapper-box\">\r\n                    {this.props.gameStatus && this.props.gameStatus === 'bet' && this.props.gameStatusProps.currentBet > 0 && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={() => this.handleBet('call')}>Call</Button>\r\n                    )}\r\n                    {this.props.gameStatus && this.props.gameStatus === 'bet' && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn || !this.state.isRaiseAllowed}  onClick={() => this.handleBet('raise')}>Punta</Button>\r\n                    )}\r\n                    {this.props.gameStatus && this.props.gameStatus === 'bet' && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={() => this.handleBet('fold')}>Fold</Button>\r\n                    )}\r\n    \r\n                    \r\n                    {this.props.gameStatus && this.props.gameStatus === 'change' && this.state.selectedCards.length === 0 && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={this.handleChangeCards}>Sto Bene</Button>\r\n                    )}\r\n                    {this.props.gameStatus && this.props.gameStatus === 'change' && this.state.selectedCards.length !== 0 && (\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!this.props.isMyTurn} onClick={this.handleChangeCards}>Cambia</Button>\r\n                    )}\r\n                </Box>\r\n    \r\n                {this.props.gameStatus && this.props.gameStatus === 'bet' && (\r\n                    <Box className=\"bet-input-box\">\r\n                        <TextField id=\"bet-value\" label=\"Valore puntata\" variant=\"filled\" disabled={!this.props.isMyTurn} inputRef={this.betValue} onChange={this.handleTextfieldChange} fullWidth/>\r\n                    </Box>\r\n                )}\r\n\r\n\r\n                <Box className=\"pocket-box\">\r\n                    <img draggable=\"false\" src={PocketImg} className=\"pocket-img\"/>\r\n                    <Typography><b>{this.props.pocket}</b>  (Puntata minima: <b>{this.props.minBet}</b>)</Typography>\r\n                </Box>\r\n\r\n                {this.props.gameStatus && this.props.gameStatus === \"bet\" && this.props.gameStatusProps.currentBet > 0 && (\r\n                    <Typography variant=\"h4\" className=\"my-cards-h4\" align=\"center\">\r\n                        Puntata maggiore: {this.props.gameStatusProps.currentBet} (<b>{this.props.gameStatusProps.betUser}</b>)\r\n                    </Typography>\r\n                )}\r\n                \r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyCards;","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CardImages.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Table.js",["65","66"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\YouShallNotPass.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Ranking.js",[],{"ruleId":"67","severity":1,"message":"68","line":10,"column":21,"nodeType":"69","endLine":10,"endColumn":73},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":21,"nodeType":"76","messageId":"77","endLine":2,"endColumn":31},{"ruleId":"74","severity":1,"message":"78","line":3,"column":9,"nodeType":"76","messageId":"77","endLine":3,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":117,"column":9,"nodeType":"81","messageId":"82","endLine":130,"endColumn":10},{"ruleId":"67","severity":1,"message":"68","line":162,"column":45,"nodeType":"69","endLine":162,"endColumn":113},{"ruleId":"67","severity":1,"message":"68","line":207,"column":41,"nodeType":"69","endLine":207,"endColumn":152},{"ruleId":"67","severity":1,"message":"68","line":243,"column":21,"nodeType":"69","endLine":243,"endColumn":84},{"ruleId":"67","severity":1,"message":"68","line":75,"column":41,"nodeType":"69","endLine":75,"endColumn":117},{"ruleId":"67","severity":1,"message":"68","line":84,"column":29,"nodeType":"69","endLine":84,"endColumn":97},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'Favorite' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]