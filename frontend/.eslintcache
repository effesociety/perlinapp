[{"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Header.js":"1","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\App.js":"2","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Enter.js":"3","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\index.js":"4","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Footer.js":"5","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\services\\socket.js":"6","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CustomSnackbar.js":"7","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Game.js":"8","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\MyCards.js":"9","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CardImages.js":"10","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Table.js":"11"},{"size":528,"mtime":1607870121227,"results":"12","hashOfConfig":"13"},{"size":1917,"mtime":1607804766121,"results":"14","hashOfConfig":"13"},{"size":3140,"mtime":1607870176451,"results":"15","hashOfConfig":"13"},{"size":173,"mtime":1607719912787,"results":"16","hashOfConfig":"13"},{"size":1298,"mtime":1607720232109,"results":"17","hashOfConfig":"13"},{"size":61,"mtime":1607727445581,"results":"18","hashOfConfig":"13"},{"size":1119,"mtime":1607804899762,"results":"19","hashOfConfig":"13"},{"size":5417,"mtime":1607878288707,"results":"20","hashOfConfig":"13"},{"size":5391,"mtime":1607873481280,"results":"21","hashOfConfig":"13"},{"size":2350,"mtime":1607786623612,"results":"22","hashOfConfig":"13"},{"size":1814,"mtime":1607875225047,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15pcm17",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Header.js",["47"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\App.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Enter.js",["48"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\index.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Footer.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\services\\socket.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CustomSnackbar.js",["49"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Game.js",["50","51"],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\MyCards.js",["52"],"import {useState, useEffect, useRef} from 'react';\r\nimport {socket} from './services/socket';\r\nimport CardImages from './CardImages';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport 'animate.css/animate.css'\r\n\r\nconst MyCards = (props) =>{\r\n    const [cards, setCards] = useState([]);\r\n    const [selectedCards, setSelectedCards] = useState([]);\r\n    const betValue = useRef(null);\r\n\r\n\r\n    useEffect(() => {  \r\n        setCards(props.cards);\r\n\r\n        //To avoid re-selecting cards\r\n        if(props.state === \"bet\"){\r\n            setSelectedCards([]);\r\n        }\r\n\r\n    }, [props]);\r\n\r\n    const handleClickCard = (card) => {\r\n        if(props.gameStatus && props.gameStatus === \"change\" && props.gameStatusProps.numChangeableCards && props.isMyTurn){\r\n            const numChangeableCards = props.gameStatusProps.numChangeableCards;\r\n            const nextSelectedCards = Array.from(selectedCards);\r\n            if(selectedCards.includes(card)){\r\n                const cardIndex = selectedCards.findIndex(c => c === card);\r\n                nextSelectedCards.splice(cardIndex,1);\r\n                setSelectedCards(nextSelectedCards);\r\n            }\r\n            else if(selectedCards.length < numChangeableCards && !selectedCards.includes(card)){\r\n                nextSelectedCards.push(card);\r\n                setSelectedCards(nextSelectedCards);\r\n            }\r\n            else if(selectedCards.length === numChangeableCards && !selectedCards.includes(card)){\r\n                nextSelectedCards.splice(0,1,card);\r\n                setSelectedCards(nextSelectedCards);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChangeCards = () => {\r\n        if(props.gameStatus && props.gameStatus === \"change\"){\r\n            const data = {\r\n                'cards': selectedCards\r\n            }\r\n            socket.emit('change', JSON.stringify(data));\r\n        }\r\n    }\r\n    \r\n    const handleBet = (action) => {\r\n        if(props.gameStatus && props.gameStatus === \"bet\"){\r\n            let data = {\r\n                'action': action,\r\n                'value': -1 //Default value\r\n            }\r\n            if(action === \"raise\"){\r\n                data.value = betValue.current.value;\r\n            }\r\n            socket.emit('bet', JSON.stringify(data));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className=\"animate__animated animate__slideInUp\">\r\n            {cards.length === 0 ? (\r\n                <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\" gutterBottom>La mano deve ancora iniziare...</Typography>\r\n            ) : (\r\n                <Typography variant=\"h2\" align=\"center\" className=\"my-cards-h2\" gutterBottom>Le tue carte</Typography>\r\n            )}\r\n            <Box className=\"card-wrapper-box\">\r\n                {cards.map(card => {\r\n\r\n                    const imgWrapperClassname = selectedCards.includes(card) ? 'card-img-wrapper-selected' : 'card-img-wrapper';\r\n                    \r\n                    return (\r\n                        <Box className=\"card-box\">\r\n                            <Box className={imgWrapperClassname}>\r\n                                <img draggable=\"false\" src={CardImages[card]} className=\"card-img\" onClick={() => handleClickCard(card)}/>\r\n                            </Box>\r\n                        </Box>\r\n                    )\r\n                })}\r\n            </Box>\r\n\r\n            <Box className=\"actions-wrapper-box\">\r\n                {props.gameStatus && props.gameStatus === 'bet' && props.gameStatusProps.currentBet > 0 && (\r\n                    <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!props.isMyTurn} onClick={() => handleBet('call')}>Call</Button>\r\n                )}\r\n                {props.gameStatus && props.gameStatus === 'bet' && (\r\n                    <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!props.isMyTurn} onClick={() => handleBet('raise')}>Punta</Button>\r\n                )}\r\n                {props.gameStatus && props.gameStatus === 'bet' && (\r\n                    <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!props.isMyTurn} onClick={() => handleBet('fold')}>Fold</Button>\r\n                )}\r\n\r\n                \r\n                {props.gameStatus && props.gameStatus === 'change' && selectedCards.length === 0 && (\r\n                    <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!props.isMyTurn} onClick={handleChangeCards}>Sto Bene</Button>\r\n                )}\r\n                {props.gameStatus && props.gameStatus === 'change' && selectedCards.length !== 0 && (\r\n                    <Button variant=\"contained\" color=\"primary\" className=\"actions-btn\" disabled={!props.isMyTurn} onClick={handleChangeCards}>Cambia</Button>\r\n                )}\r\n            </Box>\r\n\r\n            {props.gameStatus && props.gameStatus === 'bet' && (\r\n                <Box className=\"bet-input-box\">\r\n                    <TextField id=\"bet-value\" label=\"Valore puntata\" variant=\"filled\" disabled={!props.isMyTurn} inputRef={betValue} fullWidth/>\r\n                </Box>\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MyCards;","C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\CardImages.js",[],"C:\\Users\\angel\\Desktop\\PerlinApp\\codebase\\frontend\\src\\Table.js",["53","54","55"],{"ruleId":"56","severity":1,"message":"57","line":10,"column":21,"nodeType":"58","endLine":10,"endColumn":73},{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":25},{"ruleId":"59","severity":1,"message":"63","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":14},{"ruleId":"59","severity":1,"message":"64","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":12},{"ruleId":"65","severity":1,"message":"66","line":80,"column":9,"nodeType":"67","messageId":"68","endLine":90,"endColumn":10},{"ruleId":"56","severity":1,"message":"57","line":84,"column":33,"nodeType":"58","endLine":84,"endColumn":139},{"ruleId":"59","severity":1,"message":"69","line":3,"column":8,"nodeType":"61","messageId":"62","endLine":3,"endColumn":17},{"ruleId":"56","severity":1,"message":"57","line":41,"column":33,"nodeType":"58","endLine":41,"endColumn":109},{"ruleId":"56","severity":1,"message":"57","line":47,"column":13,"nodeType":"58","endLine":47,"endColumn":75},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Grid' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Container' is defined but never used."]